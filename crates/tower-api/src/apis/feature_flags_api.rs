/*
 * Tower API
 *
 * REST API to interact with Tower Services.
 *
 * The version of the OpenAPI document: v0.7.6
 * Contact: hello@tower.dev
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};

const DEFAULT_TOWER_TRACE_ID: &str = "(none)";

/// struct for passing parameters to the method [`get_feature_flag_value`]
#[derive(Clone, Debug)]
pub struct GetFeatureFlagValueParams {
    /// The feature flag key
    pub key: String
}


/// struct for typed successes of method [`get_feature_flag_value`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetFeatureFlagValueSuccess {
    Status200(models::GetFeatureFlagResponseBody),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_feature_flag_value`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetFeatureFlagValueError {
    DefaultResponse(models::ErrorModel),
    UnknownValue(serde_json::Value),
}


/// Get the current value of a feature flag. Returns the flag value if enabled, or a default falsey value if disabled.
pub async fn get_feature_flag_value(configuration: &configuration::Configuration, params: GetFeatureFlagValueParams) -> Result<ResponseContent<GetFeatureFlagValueSuccess>, Error<GetFeatureFlagValueError>> {

    let uri_str = format!("{}/feature-flags/{key}", configuration.base_path, key=crate::apis::urlencode(params.key));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    let tower_trace_id = resp
        .headers()
        .get("x-tower-trace-id")
        .and_then(|v| v.to_str().ok())
        .map_or(String::from(DEFAULT_TOWER_TRACE_ID), String::from);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<GetFeatureFlagValueSuccess> = serde_json::from_str(&content).ok();
        Ok(ResponseContent { tower_trace_id, status, content, entity })
    } else {
        let content = resp.text().await?;
        let entity: Option<GetFeatureFlagValueError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { tower_trace_id, status, content, entity }))
    }
}

