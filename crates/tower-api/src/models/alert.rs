/*
 * Tower API
 *
 * REST API to interact with Tower Services.
 *
 * The version of the OpenAPI document: v0.8.0
 * Contact: hello@tower.dev
 * Generated by: https://openapi-generator.tech
 */
use crate::models;
use serde::{Deserialize, Deserializer, Serialize};
use serde_with::{serde_as, DefaultOnNull};

#[serde_as]
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Alert {
    #[serde_as(as = "DefaultOnNull")]
    #[serde(rename = "acked")]
    pub acked: bool,
    #[serde_as(as = "DefaultOnNull")]
    #[serde(rename = "alert_type")]
    pub alert_type: String,
    #[serde_as(as = "DefaultOnNull")]
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde_as(as = "DefaultOnNull")]
    #[serde(rename = "detail")]
    pub detail: models::RunFailureAlert,
    #[serde_as(as = "DefaultOnNull")]
    #[serde(rename = "environment")]
    pub environment: String,
    #[serde_as(as = "DefaultOnNull")]
    #[serde(rename = "seq")]
    pub seq: i64,
    #[serde_as(as = "DefaultOnNull")]
    #[serde(rename = "status")]
    pub status: String,
}

impl Alert {
    pub fn new(
        acked: bool,
        alert_type: String,
        created_at: String,
        detail: models::RunFailureAlert,
        environment: String,
        seq: i64,
        status: String,
    ) -> Alert {
        Alert {
            acked,
            alert_type,
            created_at,
            detail,
            environment,
            seq,
            status,
        }
    }
}
