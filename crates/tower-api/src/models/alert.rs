/*
 * Tower API
 *
 * REST API to interact with Tower Services.
 *
 * The version of the OpenAPI document: v0.5.12
 * Contact: hello@tower.dev
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Alert {
    /// Type of the alert
    #[serde(rename = "alert_type")]
    pub alert_type: AlertType,
    /// Time when the alert was created
    #[serde(rename = "created_at")]
    pub created_at: String,
    /// Detailed description of the alert
    #[serde(rename = "details")]
    pub details: Vec<models::AlertDetail>,
    /// Unique identifier for the alert
    #[serde(rename = "id")]
    pub id: String,
    /// Status of the alert
    #[serde(rename = "status")]
    pub status: Status,
}

impl Alert {
    pub fn new(alert_type: AlertType, created_at: String, details: Vec<models::AlertDetail>, id: String, status: Status) -> Alert {
        Alert {
            alert_type,
            created_at,
            details,
            id,
            status,
        }
    }
}
/// Type of the alert
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AlertType {
    #[serde(rename = "error")]
    Error,
    #[serde(rename = "success")]
    Success,
}

impl Default for AlertType {
    fn default() -> AlertType {
        Self::Error
    }
}
/// Status of the alert
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "pending")]
    Pending,
    #[serde(rename = "sent")]
    Sent,
    #[serde(rename = "errored")]
    Errored,
}

impl Default for Status {
    fn default() -> Status {
        Self::Pending
    }
}

