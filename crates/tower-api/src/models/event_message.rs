/*
 * Tower API
 *
 * REST API to interact with Tower Services.
 *
 * The version of the OpenAPI document: development
 * Contact: hello@tower.dev
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct EventMessage {
    #[serde(rename = "data")]
    pub data: Box<models::LogLine>,
    /// The event name.
    #[serde(rename = "event", skip_serializing_if = "Option::is_none")]
    pub event: Option<Event>,
    /// The event ID.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// The retry time in milliseconds.
    #[serde(rename = "retry", skip_serializing_if = "Option::is_none")]
    pub retry: Option<i32>,
}

impl EventMessage {
    pub fn new(data: models::LogLine) -> EventMessage {
        EventMessage {
            data: Box::new(data),
            event: None,
            id: None,
            retry: None,
        }
    }
}
/// The event name.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Event {
    #[serde(rename = "message")]
    Message,
}

impl Default for Event {
    fn default() -> Event {
        Self::Message
    }
}

