/*
 * Tower API
 *
 * REST API to interact with Tower Services.
 *
 * The version of the OpenAPI document: v0.7.6
 * Contact: hello@tower.dev
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize, Deserializer};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct User {
    #[serde(rename = "company")]
    pub company: String,
    #[serde(rename = "country")]
    pub country: String,
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "email")]
    pub email: String,
    #[serde(rename = "first_name")]
    pub first_name: String,
    #[serde(rename = "is_alerts_enabled")]
    pub is_alerts_enabled: bool,
    #[serde(rename = "is_confirmed")]
    pub is_confirmed: bool,
    /// This property is deprecated. It will be removed in a future version.
    #[serde(rename = "is_invitation_claimed", skip_serializing_if = "Option::is_none")]
    pub is_invitation_claimed: Option<bool>,
    #[serde(rename = "last_name")]
    pub last_name: String,
    #[serde(rename = "profile_photo_url")]
    pub profile_photo_url: String,
}

impl User {
    pub fn new(company: String, country: String, created_at: String, email: String, first_name: String, is_alerts_enabled: bool, is_confirmed: bool, last_name: String, profile_photo_url: String) -> User {
        User {
            company,
            country,
            created_at,
            email,
            first_name,
            is_alerts_enabled,
            is_confirmed,
            is_invitation_claimed: None,
            last_name,
            profile_photo_url,
        }
    }
}

