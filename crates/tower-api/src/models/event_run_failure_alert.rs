/*
 * Tower API
 *
 * REST API to interact with Tower Services.
 *
 * The version of the OpenAPI document: v0.6.27
 * Contact: hello@tower.dev
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize, Deserializer};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct EventRunFailureAlert {
    #[serde(rename = "data")]
    pub data: models::RunFailureAlert,
    /// The event name.
    #[serde(rename = "event")]
    pub event: Event,
    /// The event ID.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// The retry time in milliseconds.
    #[serde(rename = "retry", skip_serializing_if = "Option::is_none")]
    pub retry: Option<i32>,
}

impl EventRunFailureAlert {
    pub fn new(data: models::RunFailureAlert, event: Event) -> EventRunFailureAlert {
        EventRunFailureAlert {
            data,
            event,
            id: None,
            retry: None,
        }
    }
}
/// The event name.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize)]
pub enum Event {
    #[serde(rename = "run_failure_alert")]
    RunFailureAlert,
}

impl Default for Event {
    fn default() -> Event {
        Self::RunFailureAlert
    }
}

impl<'de> Deserialize<'de> for Event {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        match s.to_lowercase().as_str() {
            "run_failure_alert" => Ok(Self::RunFailureAlert),
            _ => Err(serde::de::Error::unknown_variant(
                &s,
                &["run_failure_alert"],
            )),
        }
    }
}

