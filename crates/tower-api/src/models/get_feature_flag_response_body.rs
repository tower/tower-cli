/*
 * Tower API
 *
 * REST API to interact with Tower Services.
 *
 * The version of the OpenAPI document: v0.7.10
 * Contact: hello@tower.dev
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize, Deserializer};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetFeatureFlagResponseBody {
    /// A URL to the JSON Schema for this object.
    #[serde(rename = "$schema", skip_serializing_if = "Option::is_none")]
    pub schema: Option<String>,
    /// Whether the flag is enabled
    #[serde(rename = "enabled")]
    pub enabled: bool,
    /// The feature flag key
    #[serde(rename = "key")]
    pub key: String,
    #[serde(rename = "value", deserialize_with = "Option::deserialize")]
    pub value: Option<serde_json::Value>,
    /// The type of the value
    #[serde(rename = "value_type")]
    pub value_type: ValueType,
}

impl GetFeatureFlagResponseBody {
    pub fn new(enabled: bool, key: String, value: Option<serde_json::Value>, value_type: ValueType) -> GetFeatureFlagResponseBody {
        GetFeatureFlagResponseBody {
            schema: None,
            enabled,
            key,
            value,
            value_type,
        }
    }
}
/// The type of the value
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize)]
pub enum ValueType {
    #[serde(rename = "boolean")]
    Boolean,
    #[serde(rename = "string")]
    String,
    #[serde(rename = "number")]
    Number,
    #[serde(rename = "object")]
    Object,
}

impl Default for ValueType {
    fn default() -> ValueType {
        Self::Boolean
    }
}

impl<'de> Deserialize<'de> for ValueType {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        match s.to_lowercase().as_str() {
            "boolean" => Ok(Self::Boolean),
            "string" => Ok(Self::String),
            "number" => Ok(Self::Number),
            "object" => Ok(Self::Object),
            _ => Err(serde::de::Error::unknown_variant(
                &s,
                &["boolean", "string", "number", "object"],
            )),
        }
    }
}

