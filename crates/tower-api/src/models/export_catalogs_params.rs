/*
 * Tower API
 *
 * REST API to interact with Tower Services.
 *
 * The version of the OpenAPI document: v0.5.12
 * Contact: hello@tower.dev
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExportCatalogsParams {
    /// A URL to the JSON Schema for this object.
    #[serde(rename = "$schema", skip_serializing_if = "Option::is_none")]
    pub schema: Option<String>,
    /// Whether to fetch all catalogs or only the ones in the supplied environment.
    #[serde(rename = "all")]
    pub all: bool,
    /// The environment to filter by.
    #[serde(rename = "environment")]
    pub environment: String,
    /// The page number to fetch.
    #[serde(rename = "page")]
    pub page: i64,
    /// The number of records to fetch on each page.
    #[serde(rename = "page_size")]
    pub page_size: i64,
    /// The PEM-encoded public key you want to use to encrypt sensitive catalog properties.
    #[serde(rename = "public_key")]
    pub public_key: String,
}

impl ExportCatalogsParams {
    pub fn new(all: bool, environment: String, page: i64, page_size: i64, public_key: String) -> ExportCatalogsParams {
        ExportCatalogsParams {
            schema: None,
            all,
            environment,
            page,
            page_size,
            public_key,
        }
    }
}

