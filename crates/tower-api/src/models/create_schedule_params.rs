/*
 * Tower API
 *
 * REST API to interact with Tower Services.
 *
 * The version of the OpenAPI document: v0.8.0
 * Contact: hello@tower.dev
 * Generated by: https://openapi-generator.tech
 */
use crate::models;
use serde::{Deserialize, Deserializer, Serialize};
use serde_with::{serde_as, DefaultOnNull};

#[serde_as]
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateScheduleParams {
    /// A URL to the JSON Schema for this object.
    #[serde(rename = "$schema", skip_serializing_if = "Option::is_none")]
    pub schema: Option<String>,
    /// The name of the app to create a schedule for
    #[serde_as(as = "DefaultOnNull")]
    #[serde(rename = "app_name")]
    pub app_name: String,
    /// The specific app version to run (if omitted, will use the app's default version)
    #[serde(
        rename = "app_version",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub app_version: Option<Option<String>>,
    /// The cron expression defining when the app should run
    #[serde_as(as = "DefaultOnNull")]
    #[serde(rename = "cron")]
    pub cron: String,
    /// The environment to run the app in
    #[serde(rename = "environment", skip_serializing_if = "Option::is_none")]
    pub environment: Option<String>,
    /// Parameters to pass when running the app
    #[serde(rename = "parameters", skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<models::RunParameter>>,
    /// The status of the schedule (defaults to active)
    #[serde(
        rename = "status",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub status: Option<Option<Status>>,
}

impl CreateScheduleParams {
    pub fn new(app_name: String, cron: String) -> CreateScheduleParams {
        CreateScheduleParams {
            schema: None,
            app_name,
            app_version: None,
            cron,
            environment: None,
            parameters: None,
            status: None,
        }
    }
}
/// The status of the schedule (defaults to active)
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize)]
pub enum Status {
    #[serde(rename = "active")]
    Active,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for Status {
    fn default() -> Status {
        Self::Active
    }
}

impl<'de> Deserialize<'de> for Status {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        match s.to_lowercase().as_str() {
            "active" => Ok(Self::Active),
            "disabled" => Ok(Self::Disabled),
            _ => Err(serde::de::Error::unknown_variant(
                &s,
                &["active", "disabled"],
            )),
        }
    }
}
