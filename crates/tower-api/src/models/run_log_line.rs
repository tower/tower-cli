/*
 * Tower API
 *
 * REST API to interact with Tower Services.
 *
 * The version of the OpenAPI document: v0.7.6
 * Contact: hello@tower.dev
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize, Deserializer};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RunLogLine {
    /// The channel this log line belongs to.
    #[serde(rename = "channel")]
    pub channel: Channel,
    /// Contents of the log message.
    #[serde(rename = "content")]
    pub content: String,
    /// Line number.
    #[serde(rename = "line_num")]
    pub line_num: i64,
    /// This property is deprecated. Please use content instead.
    #[serde(rename = "message", skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// Timestamp of the log line.
    #[serde(rename = "reported_at")]
    pub reported_at: String,
    /// The uuid of the Run.
    #[serde(rename = "run_id")]
    pub run_id: String,
    /// This property is deprecated. Please use reported_at instead.
    #[serde(rename = "timestamp", skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<String>,
}

impl RunLogLine {
    pub fn new(channel: Channel, content: String, line_num: i64, reported_at: String, run_id: String) -> RunLogLine {
        RunLogLine {
            channel,
            content,
            line_num,
            message: None,
            reported_at,
            run_id,
            timestamp: None,
        }
    }
}
/// The channel this log line belongs to.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize)]
pub enum Channel {
    #[serde(rename = "program")]
    Program,
    #[serde(rename = "setup")]
    Setup,
}

impl Default for Channel {
    fn default() -> Channel {
        Self::Program
    }
}

impl<'de> Deserialize<'de> for Channel {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        match s.to_lowercase().as_str() {
            "program" => Ok(Self::Program),
            "setup" => Ok(Self::Setup),
            _ => Err(serde::de::Error::unknown_variant(
                &s,
                &["program", "setup"],
            )),
        }
    }
}

