/*
 * Tower API
 *
 * REST API to interact with Tower Services.
 *
 * The version of the OpenAPI document: v0.6.27
 * Contact: hello@tower.dev
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize, Deserializer};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Run {
    /// Link to the run in the Tower UI
    #[serde(rename = "$link")]
    pub dollar_link: String,
    #[serde(rename = "app_name")]
    pub app_name: String,
    /// This property is deprecated. Please use app_name instead.
    #[serde(rename = "app_slug", skip_serializing_if = "Option::is_none")]
    pub app_slug: Option<String>,
    #[serde(rename = "app_version")]
    pub app_version: String,
    #[serde(rename = "cancelled_at", deserialize_with = "Option::deserialize")]
    pub cancelled_at: Option<String>,
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "ended_at", deserialize_with = "Option::deserialize")]
    pub ended_at: Option<String>,
    #[serde(rename = "environment")]
    pub environment: String,
    /// Exit code of the run, if the run is completed. Null if there is no exit code
    #[serde(rename = "exit_code", deserialize_with = "Option::deserialize")]
    pub exit_code: Option<i64>,
    #[serde(rename = "number")]
    pub number: i64,
    /// Parameters used to invoke this run.
    #[serde(rename = "parameters")]
    pub parameters: Vec<models::RunParameter>,
    #[serde(rename = "run_id")]
    pub run_id: String,
    #[serde(rename = "scheduled_at")]
    pub scheduled_at: String,
    #[serde(rename = "started_at", deserialize_with = "Option::deserialize")]
    pub started_at: Option<String>,
    #[serde(rename = "status")]
    pub status: Status,
    #[serde(rename = "status_group")]
    pub status_group: StatusGroup,
}

impl Run {
    pub fn new(dollar_link: String, app_name: String, app_version: String, cancelled_at: Option<String>, created_at: String, ended_at: Option<String>, environment: String, exit_code: Option<i64>, number: i64, parameters: Vec<models::RunParameter>, run_id: String, scheduled_at: String, started_at: Option<String>, status: Status, status_group: StatusGroup) -> Run {
        Run {
            dollar_link,
            app_name,
            app_slug: None,
            app_version,
            cancelled_at,
            created_at,
            ended_at,
            environment,
            exit_code,
            number,
            parameters,
            run_id,
            scheduled_at,
            started_at,
            status,
            status_group,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize)]
pub enum Status {
    #[serde(rename = "scheduled")]
    Scheduled,
    #[serde(rename = "pending")]
    Pending,
    #[serde(rename = "running")]
    Running,
    #[serde(rename = "crashed")]
    Crashed,
    #[serde(rename = "errored")]
    Errored,
    #[serde(rename = "exited")]
    Exited,
    #[serde(rename = "cancelled")]
    Cancelled,
}

impl Default for Status {
    fn default() -> Status {
        Self::Scheduled
    }
}

impl<'de> Deserialize<'de> for Status {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        match s.to_lowercase().as_str() {
            "scheduled" => Ok(Self::Scheduled),
            "pending" => Ok(Self::Pending),
            "running" => Ok(Self::Running),
            "crashed" => Ok(Self::Crashed),
            "errored" => Ok(Self::Errored),
            "exited" => Ok(Self::Exited),
            "cancelled" => Ok(Self::Cancelled),
            _ => Err(serde::de::Error::unknown_variant(
                &s,
                &["scheduled", "pending", "running", "crashed", "errored", "exited", "cancelled"],
            )),
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize)]
pub enum StatusGroup {
    #[serde(rename = "successful")]
    Successful,
    #[serde(rename = "failed")]
    Failed,
    #[serde(rename = "")]
    Empty,
}

impl Default for StatusGroup {
    fn default() -> StatusGroup {
        Self::Successful
    }
}

impl<'de> Deserialize<'de> for StatusGroup {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        match s.to_lowercase().as_str() {
            "successful" => Ok(Self::Successful),
            "failed" => Ok(Self::Failed),
            "" => Ok(Self::Empty),
            _ => Err(serde::de::Error::unknown_variant(
                &s,
                &["successful", "failed", ""],
            )),
        }
    }
}

