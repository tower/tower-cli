/*
 * Tower API
 *
 * REST API to interact with Tower Services.
 *
 * The version of the OpenAPI document: development
 * Contact: hello@tower.dev
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Run {
    #[serde(rename = "app_name")]
    pub app_name: String,
    #[serde(rename = "cancelled_at", deserialize_with = "Option::deserialize")]
    pub cancelled_at: Option<String>,
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "ended_at", deserialize_with = "Option::deserialize")]
    pub ended_at: Option<String>,
    #[serde(rename = "number")]
    pub number: i64,
    #[serde(rename = "run_id")]
    pub run_id: String,
    #[serde(rename = "scheduled_at")]
    pub scheduled_at: String,
    #[serde(rename = "started_at", deserialize_with = "Option::deserialize")]
    pub started_at: Option<String>,
    #[serde(rename = "status")]
    pub status: String,
    #[serde(rename = "status_group")]
    pub status_group: String,
}

impl Run {
    pub fn new(app_name: String, cancelled_at: Option<String>, created_at: String, ended_at: Option<String>, number: i64, run_id: String, scheduled_at: String, started_at: Option<String>, status: String, status_group: String) -> Run {
        Run {
            app_name,
            cancelled_at,
            created_at,
            ended_at,
            number,
            run_id,
            scheduled_at,
            started_at,
            status,
            status_group,
        }
    }
}

